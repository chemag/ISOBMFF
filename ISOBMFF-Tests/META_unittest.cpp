/*
 *  Copyright (c) Meta Platforms, Inc. and its affiliates.
 */
#include <ISOBMFF.hpp>                  // for various
#include <ISOBMFF/BinaryDataStream.hpp> // for BinaryDataStream
#include <ISOBMFF/Parser.hpp>           // for Parser

#include <gmock/gmock.h>
#include <gtest/gtest.h>

namespace ISOBMFF {

class ISOBMFMetaTest : public ::testing::Test {
public:
  ISOBMFMetaTest() {}
  ~ISOBMFMetaTest() override {}
};

TEST_F(ISOBMFMetaTest, TestSampleVideo) {
  // fuzzer::conv: data
  const std::vector<uint8_t> &buffer = {
      // following example input is from a sample .mp4 video file
      // meta size: 118 bytes
      0x00, 0x00, 0x00, 0x76,
      // meta
      0x6d, 0x65, 0x74, 0x61,
      // meta content
      0x00, 0x00, 0x00, 0x21, 0x68, 0x64, 0x6c, 0x72, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x6d, 0x64, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x2b, 0x6b, 0x65, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x1b, 0x6d, 0x64, 0x74, 0x61, 0x63, 0x6f, 0x6d,
      0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x76, 0x65, 0x72,
      0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x22, 0x69, 0x6c, 0x73, 0x74,
      0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x12,
      0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x31, 0x32};

  // fuzzer::conv: begin
  ISOBMFF::BinaryDataStream stream(buffer);
  uint64_t length = stream.ReadBigEndianUInt32();
  std::string name = stream.ReadFourCC();
  ISOBMFF::BinaryDataStream *content = new ISOBMFF::BinaryDataStream(
      stream.Read(static_cast<uint32_t>(length) - 8));
  ISOBMFF::Parser parser;
  std::shared_ptr<ISOBMFF::Box> box = parser.CreateBox("meta");
  if (box != nullptr) {
    if (content) {
      box->ReadData(parser, *content);
    }
  }
  // fuzzer::conv: end

  EXPECT_EQ(length, 118);
  EXPECT_EQ(name, "meta");
  EXPECT_TRUE(box != nullptr);
  EXPECT_TRUE(content != nullptr);
}
} // namespace ISOBMFF
